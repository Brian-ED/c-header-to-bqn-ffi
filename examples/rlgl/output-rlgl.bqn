#### THIS TEXT HAS BEEN AUTOGENERATED ####

# Makes an importer that improves the ffi function creation syntax
MakeImporter ‚áê {debugùïäpathToBin: # Debug is useful for Segmentation Faults
  NestedStructToStr ‚Üê {
    1‚â•‚â°ùï©?ùï©;
    lists‚Äøatoms ‚Üê √ó‚àò‚â°¬®‚ä∏(/ ‚ãà ¬¨‚ä∏/)ùï©
    atoms‚àæ'{'‚àæ'}'¬´‚àæ','‚àæ¬®ùïä¬®lists
  }
  NestedStructToStrRet ‚Üê {
    1‚â•‚â°ùï©?ùï©;
    lists‚Äøatoms ‚Üê √ó‚àò‚â°¬®‚ä∏(/ ‚ãà ¬¨‚ä∏/)ùï©
    atoms‚àæ'{'‚àæ'}'¬´‚àæ','‚àæ¬®ùïä¬®"*"‚çü("*i8:c8"‚ä∏‚â°‚à®"*u8:c8"‚ä∏‚â°)¬®lists
  }

  {ùï® funcName _ùï£ inpTypes: outType‚Üêùï®‚ä£‚ü®‚ü©
    a‚Üê'>'‚ä∏‚àæ‚åæ‚äë‚çü(1=‚â†) NestedStructToStr¬®ùï©
    HandleError ‚Üê {
      ‚Ä¢Out "DEBUG TYPE INFO:"
      ‚Ä¢Out ‚Ä¢Fmt ùï©
      ‚Ä¢Out "END OF DEBUG TYPE INFO; BEGINING WITH FULL ERROR:"
      ‚Ä¢term.Flush@
      ùï®‚Ä¢FFIùï©
    }
    func ‚Üê pathToBin ‚Ä¢FFI‚éäHandleError ‚ü® NestedStructToStrRet outType‚ãÑfuncName‚ü©‚àæa
    m ‚Üê str‚ä∏‚â°¬®a
    IfDebug ‚Üê {‚Ä¢term.Flush@‚ä£‚Ä¢Out funcName ‚ãÑ ùïè‚ä£‚Ä¢term.Flush‚àò@‚ä£‚Ä¢Out‚àòfuncName}
    IfDebug‚çüdebug {ùïè‚àæ‚üú@}‚çü(a‚â°‚ãà'>'‚àæstr) {ùïè‚àæ‚üú@¬®‚åæ(m‚ä∏/)}‚çü(‚à®¬¥m) func
  }
}

# predefined C types
bool ‚áê "i8"
c    ‚áê "i8"
i    ‚áê "i32"
f    ‚áê "f32"
u    ‚áê "u32"
i8   ‚áê "i8"
u8   ‚áê "u8"
str  ‚áê "*i8:c8"
uStr ‚áê "*u8:c8"
ptr  ‚áê "*"

pathToBinary ‚áê "/home/brian/Persinal/Scripts/APL/c-header-to-bqn-ffi/examples/rlgl"
r ‚áê 0 MakeImporter pathToBinary

##################################
# End of setup for easy ffi.     #
# Begining of autogenerated ffi. #
##################################

rLGLVersionString                    ‚áê "4.5" #
rL_DEFAULT_BATCH_BUFFER_ELEMENTS     ‚áê 8192  #
rL_DEFAULT_BATCH_BUFFERS             ‚áê 1     # Default number of batch buffers (multi-buffering)
rL_DEFAULT_BATCH_DRAWCALLS           ‚áê 256   # Default number of batch draw calls (by state changes: mode, texture)
rL_DEFAULT_BATCH_MAX_TEXTURE_UNITS   ‚áê 4     # Maximum number of textures units that can be activated on batch drawing (SetShaderValueTexture())
rL_MAX_MATRIX_STACK_SIZE             ‚áê 32    # Maximum size of Matrix stack
rL_MAX_SHADER_LOCATIONS              ‚áê 32    # Maximum number of shader locations supported
rL_CULL_DISTANCE_NEAR                ‚áê 0.01  # Default near cull distance
rL_CULL_DISTANCE_FAR                 ‚áê 1000  # Default far cull distance
rL_TEXTURE_WRAP_S                    ‚áê 10242 # GL_TEXTURE_WRAP_S
rL_TEXTURE_WRAP_T                    ‚áê 10243 # GL_TEXTURE_WRAP_T
rL_TEXTURE_MAG_FILTER                ‚áê 10240 # GL_TEXTURE_MAG_FILTER
rL_TEXTURE_MIN_FILTER                ‚áê 10241 # GL_TEXTURE_MIN_FILTER
rL_TEXTURE_FILTER_NEAREST            ‚áê 9728  # GL_NEAREST
rL_TEXTURE_FILTER_LINEAR             ‚áê 9729  # GL_LINEAR
rL_TEXTURE_FILTER_MIP_NEAREST        ‚áê 9984  # GL_NEAREST_MIPMAP_NEAREST
rL_TEXTURE_FILTER_NEAREST_MIP_LINEAR ‚áê 9986  # GL_NEAREST_MIPMAP_LINEAR
rL_TEXTURE_FILTER_LINEAR_MIP_NEAREST ‚áê 9985  # GL_LINEAR_MIPMAP_NEAREST
rL_TEXTURE_FILTER_MIP_LINEAR         ‚áê 9987  # GL_LINEAR_MIPMAP_LINEAR
rL_TEXTURE_FILTER_ANISOTROPIC        ‚áê 12288 # Anisotropic filter (custom identifier)
rL_TEXTURE_MIPMAP_BIAS_RATIO         ‚áê 16384 # Texture mipmap bias, percentage ratio (custom identifier)
rL_TEXTURE_WRAP_REPEAT               ‚áê 10497 # GL_REPEAT
rL_TEXTURE_WRAP_CLAMP                ‚áê 33071 # GL_CLAMP_TO_EDGE
rL_TEXTURE_WRAP_MIRROR_REPEAT        ‚áê 33648 # GL_MIRRORED_REPEAT
rL_TEXTURE_WRAP_MIRROR_CLAMP         ‚áê 34626 # GL_MIRROR_CLAMP_EXT
rL_MODELVIEW                         ‚áê 5888  # GL_MODELVIEW
rL_PROJECTION                        ‚áê 5889  # GL_PROJECTION
rL_TEXTURE                           ‚áê 5890  # GL_TEXTURE
rL_LINES                             ‚áê 1     # GL_LINES
rL_TRIANGLES                         ‚áê 4     # GL_TRIANGLES
rL_QUADS                             ‚áê 7     # GL_QUADS
rL_UNSIGNED_BYTE                     ‚áê 5121  # GL_UNSIGNED_BYTE
rL_FLOAT                             ‚áê 5126  # GL_FLOAT
rL_STREAM_DRAW                       ‚áê 35040 # GL_STREAM_DRAW
rL_STREAM_READ                       ‚áê 35041 # GL_STREAM_READ
rL_STREAM_COPY                       ‚áê 35042 # GL_STREAM_COPY
rL_STATIC_DRAW                       ‚áê 35044 # GL_STATIC_DRAW
rL_STATIC_READ                       ‚áê 35045 # GL_STATIC_READ
rL_STATIC_COPY                       ‚áê 35046 # GL_STATIC_COPY
rL_DYNAMIC_DRAW                      ‚áê 35048 # GL_DYNAMIC_DRAW
rL_DYNAMIC_READ                      ‚áê 35049 # GL_DYNAMIC_READ
rL_DYNAMIC_COPY                      ‚áê 35050 # GL_DYNAMIC_COPY
rL_FRAGMENT_SHADER                   ‚áê 35632 # GL_FRAGMENT_SHADER
rL_VERTEX_SHADER                     ‚áê 35633 # GL_VERTEX_SHADER
rL_COMPUTE_SHADER                    ‚áê 37305 # GL_COMPUTE_SHADER
rLZERO                               ‚áê 0     # GL_ZERO
rL_ONE                               ‚áê 1     # GL_ONE
rL_SRC_COLOR                         ‚áê 768   # GL_SRC_COLOR
rL_ONE_MINUS_SRC_COLOR               ‚áê 769   # GL_ONE_MINUS_SRC_COLOR
rL_SRC_ALPHA                         ‚áê 770   # GL_SRC_ALPHA
rL_ONE_MINUS_SRC_ALPHA               ‚áê 771   # GL_ONE_MINUS_SRC_ALPHA
rL_DST_ALPHA                         ‚áê 772   # GL_DST_ALPHA
rL_ONE_MINUS_DST_ALPHA               ‚áê 773   # GL_ONE_MINUS_DST_ALPHA
rL_DST_COLOR                         ‚áê 774   # GL_DST_COLOR
rL_ONE_MINUS_DST_COLOR               ‚áê 775   # GL_ONE_MINUS_DST_COLOR
rL_SRC_ALPHA_SATURATE                ‚áê 776   # GL_SRC_ALPHA_SATURATE
rL_CONSTANT_COLOR                    ‚áê 32769 # GL_CONSTANT_COLOR
rL_ONE_MINUS_CONSTANT_COLOR          ‚áê 32770 # GL_ONE_MINUS_CONSTANT_COLOR
rL_CONSTANT_ALPHA                    ‚áê 32771 # GL_CONSTANT_ALPHA
rL_ONE_MINUS_CONSTANT_ALPHA          ‚áê 32772 # GL_ONE_MINUS_CONSTANT_ALPHA
rL_FUNC_ADD                          ‚áê 32774 # GL_FUNC_ADD
rL_MIN                               ‚áê 32775 # GL_MIN
rL_MAX                               ‚áê 32776 # GL_MAX
rL_FUNC_SUBTRACT                     ‚áê 32778 # GL_FUNC_SUBTRACT
rL_FUNC_REVERSE_SUBTRACT             ‚áê 32779 # GL_FUNC_REVERSE_SUBTRACT
rL_BLEND_EQUATION                    ‚áê 32777 # GL_BLEND_EQUATION
rL_BLEND_EQUATION_RGB                ‚áê 32777 # GL_BLEND_EQUATION_RGB   // (Same as BLEND_EQUATION)
rL_BLEND_EQUATION_ALPHA              ‚áê 34877 # GL_BLEND_EQUATION_ALPHA
rL_BLEND_DST_RGB                     ‚áê 32968 # GL_BLEND_DST_RGB
rL_BLEND_SRC_RGB                     ‚áê 32969 # GL_BLEND_SRC_RGB
rL_BLEND_DST_ALPHA                   ‚áê 32970 # GL_BLEND_DST_ALPHA
rL_BLEND_SRC_ALPHA                   ‚áê 32971 # GL_BLEND_SRC_ALPHA
rL_BLEND_COLOR                       ‚áê 32773 # GL_BLEND_COLOR
rL_READ_FRAMEBUFFER                  ‚áê 36008 # GL_READ_FRAMEBUFFER
rL_DRAW_FRAMEBUFFER                  ‚áê 36009 # GL_DRAW_FRAMEBUFFER

rlGlVersion ‚áê { # OpenGL version
  rL_OPENGL_11    ‚áê 1  # OpenGL 1.1
  rL_OPENGL_21    ‚áê 2  # OpenGL 2.1 (GLSL 120)
  rL_OPENGL_33    ‚áê 3  # OpenGL 3.3 (GLSL 330)
  rL_OPENGL_43    ‚áê 4  # OpenGL 4.3 (using GLSL 330)
  rL_OPENGL_ES_20 ‚áê 5  # OpenGL ES 2.0 (GLSL 100)
  rL_OPENGL_ES_30 ‚áê 6  # OpenGL ES 3.0 (GLSL 300 es)
}
rlTraceLogLevel ‚áê { # Trace log level
  rL_LOG_ALL     ‚áê 0  # Display all logs
  rL_LOG_TRACE   ‚áê 1  # Trace logging, intended for internal use only
  rL_LOG_DEBUG   ‚áê 2  # Debug logging, used for internal debugging, it should be disabled on release builds
  rL_LOG_INFO    ‚áê 3  # Info logging, used for program execution info
  rL_LOG_WARNING ‚áê 4  # Warning logging, used on recoverable failures
  rL_LOG_ERROR   ‚áê 5  # Error logging, used on unrecoverable failures
  rL_LOG_FATAL   ‚áê 6  # Fatal logging, used to abort program: exit(EXIT_FAILURE)
  rL_LOG_NONE    ‚áê 7  # Disable logging
}
rlPixelFormat ‚áê { # Texture pixel formats
  rL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE    ‚áê 1   # 8 bit per pixel (no alpha)
  rL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA   ‚áê 2   # 8*2 bpp (2 channels)
  rL_PIXELFORMAT_UNCOMPRESSED_R5G6B5       ‚áê 3   # 16 bpp
  rL_PIXELFORMAT_UNCOMPRESSED_R8G8B8       ‚áê 4   # 24 bpp
  rL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1     ‚áê 5   # 16 bpp (1 bit alpha)
  rL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4     ‚áê 6   # 16 bpp (4 bit alpha)
  rL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8     ‚áê 7   # 32 bpp
  rL_PIXELFORMAT_UNCOMPRESSED_R32          ‚áê 8   # 32 bpp (1 channel - float)
  rL_PIXELFORMAT_UNCOMPRESSED_R32G32B32    ‚áê 9   # 32*3 bpp (3 channels - float)
  rL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32 ‚áê 10  # 32*4 bpp (4 channels - float)
  rL_PIXELFORMAT_UNCOMPRESSED_R16          ‚áê 11  # 16 bpp (1 channel - half float)
  rL_PIXELFORMAT_UNCOMPRESSED_R16G16B16    ‚áê 12  # 16*3 bpp (3 channels - half float)
  rL_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16 ‚áê 13  # 16*4 bpp (4 channels - half float)
  rL_PIXELFORMAT_COMPRESSED_DXT1_RGB       ‚áê 14  # 4 bpp (no alpha)
  rL_PIXELFORMAT_COMPRESSED_DXT1_RGBA      ‚áê 15  # 4 bpp (1 bit alpha)
  rL_PIXELFORMAT_COMPRESSED_DXT3_RGBA      ‚áê 16  # 8 bpp
  rL_PIXELFORMAT_COMPRESSED_DXT5_RGBA      ‚áê 17  # 8 bpp
  rL_PIXELFORMAT_COMPRESSED_ETC1_RGB       ‚áê 18  # 4 bpp
  rL_PIXELFORMAT_COMPRESSED_ETC2_RGB       ‚áê 19  # 4 bpp
  rL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA  ‚áê 20  # 8 bpp
  rL_PIXELFORMAT_COMPRESSED_PVRT_RGB       ‚áê 21  # 4 bpp
  rL_PIXELFORMAT_COMPRESSED_PVRT_RGBA      ‚áê 22  # 4 bpp
  rL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA  ‚áê 23  # 8 bpp
  rL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA  ‚áê 24  # 2 bpp
}
rlTextureFilter ‚áê { # Texture parameters: filter mode
  rL_TEXTURE_FILTER_POINT           ‚áê 0  # No filter, just pixel approximation
  rL_TEXTURE_FILTER_BILINEAR        ‚áê 1  # Linear filtering
  rL_TEXTURE_FILTER_TRILINEAR       ‚áê 2  # Trilinear filtering (linear with mipmaps)
  rL_TEXTURE_FILTER_ANISOTROPIC_4X  ‚áê 3  # Anisotropic filtering 4x
  rL_TEXTURE_FILTER_ANISOTROPIC_8X  ‚áê 4  # Anisotropic filtering 8x
  rL_TEXTURE_FILTER_ANISOTROPIC_16X ‚áê 5  # Anisotropic filtering 16x
}
rlBlendMode ‚áê { # Color blending modes (pre-defined)
  rL_BLEND_ALPHA             ‚áê 0  # Blend textures considering alpha (default)
  rL_BLEND_ADDITIVE          ‚áê 1  # Blend textures adding colors
  rL_BLEND_MULTIPLIED        ‚áê 2  # Blend textures multiplying colors
  rL_BLEND_ADD_COLORS        ‚áê 3  # Blend textures adding colors (alternative)
  rL_BLEND_SUBTRACT_COLORS   ‚áê 4  # Blend textures subtracting colors (alternative)
  rL_BLEND_ALPHA_PREMULTIPLY ‚áê 5  # Blend premultiplied textures considering alpha
  rL_BLEND_CUSTOM            ‚áê 6  # Blend textures using custom src/dst factors (use rlSetBlendFactors())
  rL_BLEND_CUSTOM_SEPARATE   ‚áê 7  # Blend textures using custom src/dst factors (use rlSetBlendFactorsSeparate())
}
rlShaderLocationIndex ‚áê { # Shader location point type
  rL_SHADER_LOC_VERTEX_POSITION   ‚áê 0   # Shader location: vertex attribute: position
  rL_SHADER_LOC_VERTEX_TEXCOORD01 ‚áê 1   # Shader location: vertex attribute: texcoord01
  rL_SHADER_LOC_VERTEX_TEXCOORD02 ‚áê 2   # Shader location: vertex attribute: texcoord02
  rL_SHADER_LOC_VERTEX_NORMAL     ‚áê 3   # Shader location: vertex attribute: normal
  rL_SHADER_LOC_VERTEX_TANGENT    ‚áê 4   # Shader location: vertex attribute: tangent
  rL_SHADER_LOC_VERTEX_COLOR      ‚áê 5   # Shader location: vertex attribute: color
  rL_SHADER_LOC_MATRIX_MVP        ‚áê 6   # Shader location: matrix uniform: model-view-projection
  rL_SHADER_LOC_MATRIX_VIEW       ‚áê 7   # Shader location: matrix uniform: view (camera transform)
  rL_SHADER_LOC_MATRIX_PROJECTION ‚áê 8   # Shader location: matrix uniform: projection
  rL_SHADER_LOC_MATRIX_MODEL      ‚áê 9   # Shader location: matrix uniform: model (transform)
  rL_SHADER_LOC_MATRIX_NORMAL     ‚áê 10  # Shader location: matrix uniform: normal
  rL_SHADER_LOC_VECTOR_VIEW       ‚áê 11  # Shader location: vector uniform: view
  rL_SHADER_LOC_COLOR_DIFFUSE     ‚áê 12  # Shader location: vector uniform: diffuse color
  rL_SHADER_LOC_COLOR_SPECULAR    ‚áê 13  # Shader location: vector uniform: specular color
  rL_SHADER_LOC_COLOR_AMBIENT     ‚áê 14  # Shader location: vector uniform: ambient color
  rL_SHADER_LOC_MAP_ALBEDO        ‚áê 15  # Shader location: sampler2d texture: albedo (same as: RL_SHADER_LOC_MAP_DIFFUSE)
  rL_SHADER_LOC_MAP_METALNESS     ‚áê 16  # Shader location: sampler2d texture: metalness (same as: RL_SHADER_LOC_MAP_SPECULAR)
  rL_SHADER_LOC_MAP_NORMAL        ‚áê 17  # Shader location: sampler2d texture: normal
  rL_SHADER_LOC_MAP_ROUGHNESS     ‚áê 18  # Shader location: sampler2d texture: roughness
  rL_SHADER_LOC_MAP_OCCLUSION     ‚áê 19  # Shader location: sampler2d texture: occlusion
  rL_SHADER_LOC_MAP_EMISSION      ‚áê 20  # Shader location: sampler2d texture: emission
  rL_SHADER_LOC_MAP_HEIGHT        ‚áê 21  # Shader location: sampler2d texture: height
  rL_SHADER_LOC_MAP_CUBEMAP       ‚áê 22  # Shader location: samplerCube texture: cubemap
  rL_SHADER_LOC_MAP_IRRADIANCE    ‚áê 23  # Shader location: samplerCube texture: irradiance
  rL_SHADER_LOC_MAP_PREFILTER     ‚áê 24  # Shader location: samplerCube texture: prefilter
  rL_SHADER_LOC_MAP_BRDF          ‚áê 25  # Shader location: sampler2d texture: brdf
}
rlShaderUniformDataType ‚áê { # Shader uniform data type
  rL_SHADER_UNIFORM_FLOAT     ‚áê 0  # Shader uniform type: float
  rL_SHADER_UNIFORM_VEC2      ‚áê 1  # Shader uniform type: vec2 (2 float)
  rL_SHADER_UNIFORM_VEC3      ‚áê 2  # Shader uniform type: vec3 (3 float)
  rL_SHADER_UNIFORM_VEC4      ‚áê 3  # Shader uniform type: vec4 (4 float)
  rL_SHADER_UNIFORM_INT       ‚áê 4  # Shader uniform type: int
  rL_SHADER_UNIFORM_IVEC2     ‚áê 5  # Shader uniform type: ivec2 (2 int)
  rL_SHADER_UNIFORM_IVEC3     ‚áê 6  # Shader uniform type: ivec3 (3 int)
  rL_SHADER_UNIFORM_IVEC4     ‚áê 7  # Shader uniform type: ivec4 (4 int)
  rL_SHADER_UNIFORM_SAMPLER2D ‚áê 8  # Shader uniform type: sampler2d
}
rlShaderAttributeDataType ‚áê { # Shader attribute data types
  rL_SHADER_ATTRIB_FLOAT ‚áê 0  # Shader attribute type: float
  rL_SHADER_ATTRIB_VEC2  ‚áê 1  # Shader attribute type: vec2 (2 float)
  rL_SHADER_ATTRIB_VEC3  ‚áê 2  # Shader attribute type: vec3 (3 float)
  rL_SHADER_ATTRIB_VEC4  ‚áê 3  # Shader attribute type: vec4 (4 float)
}
rlFramebufferAttachType ‚áê { # Framebuffer attachment type
  rL_ATTACHMENT_COLOR_CHANNEL0 ‚áê 0    # Framebuffer attachment type: color 0
  rL_ATTACHMENT_COLOR_CHANNEL1 ‚áê 1    # Framebuffer attachment type: color 1
  rL_ATTACHMENT_COLOR_CHANNEL2 ‚áê 2    # Framebuffer attachment type: color 2
  rL_ATTACHMENT_COLOR_CHANNEL3 ‚áê 3    # Framebuffer attachment type: color 3
  rL_ATTACHMENT_COLOR_CHANNEL4 ‚áê 4    # Framebuffer attachment type: color 4
  rL_ATTACHMENT_COLOR_CHANNEL5 ‚áê 5    # Framebuffer attachment type: color 5
  rL_ATTACHMENT_COLOR_CHANNEL6 ‚áê 6    # Framebuffer attachment type: color 6
  rL_ATTACHMENT_COLOR_CHANNEL7 ‚áê 7    # Framebuffer attachment type: color 7
  rL_ATTACHMENT_DEPTH          ‚áê 100  # Framebuffer attachment type: depth
  rL_ATTACHMENT_STENCIL        ‚áê 200  # Framebuffer attachment type: stencil
}
rlFramebufferAttachTextureType ‚áê { # Framebuffer texture attachment type
  rL_ATTACHMENT_CUBEMAP_POSITIVE_X ‚áê 0    # Framebuffer texture attachment type: cubemap, +X side
  rL_ATTACHMENT_CUBEMAP_NEGATIVE_X ‚áê 1    # Framebuffer texture attachment type: cubemap, -X side
  rL_ATTACHMENT_CUBEMAP_POSITIVE_Y ‚áê 2    # Framebuffer texture attachment type: cubemap, +Y side
  rL_ATTACHMENT_CUBEMAP_NEGATIVE_Y ‚áê 3    # Framebuffer texture attachment type: cubemap, -Y side
  rL_ATTACHMENT_CUBEMAP_POSITIVE_Z ‚áê 4    # Framebuffer texture attachment type: cubemap, +Z side
  rL_ATTACHMENT_CUBEMAP_NEGATIVE_Z ‚áê 5    # Framebuffer texture attachment type: cubemap, -Z side
  rL_ATTACHMENT_TEXTURE2D          ‚áê 100  # Framebuffer texture attachment type: texture2d
  rL_ATTACHMENT_RENDERBUFFER       ‚áê 200  # Framebuffer texture attachment type: renderbuffer
}
rlCullMode ‚áê { # Face culling mode
  rL_CULL_FACE_FRONT ‚áê 0  #
  rL_CULL_FACE_BACK  ‚áê 1  #
}

matrix ‚áê ‚ü® # Matrix, 4x4 components, column major, OpenGL style, right handed
  f # m0   # Matrix first row (4 components)
  f # m4   # Matrix first row (4 components)
  f # m8   # Matrix first row (4 components)
  f # m12  # Matrix first row (4 components)
  f # m1   # Matrix second row (4 components)
  f # m5   # Matrix second row (4 components)
  f # m9   # Matrix second row (4 components)
  f # m13  # Matrix second row (4 components)
  f # m2   # Matrix third row (4 components)
  f # m6   # Matrix third row (4 components)
  f # m10  # Matrix third row (4 components)
  f # m14  # Matrix third row (4 components)
  f # m3   # Matrix fourth row (4 components)
  f # m7   # Matrix fourth row (4 components)
  f # m11  # Matrix fourth row (4 components)
  f # m15  # Matrix fourth row (4 components)
‚ü©
rlVertexBuffer ‚áê ‚ü® # Dynamic vertex buffers (position + texcoords + colors + indices arrays)
  i       # elementCount  # Number of elements in the buffer (QUADS)
  "*"‚àæf   # vertices      # Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
  "*"‚àæf   # texcoords     # Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
  ustr    # colors        # Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
  "*"‚àæu   # indices       # Vertex indices (in case vertex data comes indexed) (6 indices per quad)
  u       # vaoId         # OpenGL Vertex Array Object id
  "[4]"‚àæu # vboId         # OpenGL Vertex Buffer Objects id (4 types of vertex data)
‚ü©
rlDrawCall ‚áê ‚ü® # of those state-change happens (this is done in core module)
  i # mode             # Drawing mode: LINES, TRIANGLES, QUADS
  i # vertexCount      # Number of vertex of the draw
  i # vertexAlignment  # Number of vertex required for index alignment (LINES, TRIANGLES)
  u # textureId        # Texture id to be used on the draw -> Use to create new draw call if changes
‚ü©
rlRenderBatch ‚áê ‚ü® # rlRenderBatch type
  i                  # bufferCount    # Number of vertex buffers (multi-buffering support)
  i                  # currentBuffer  # Current buffer tracking in case of multi-buffering
  "*"‚àærlVertexBuffer # vertexBuffer   # Dynamic buffer(s) for vertex data
  "*"‚àærlDrawCall     # draws          # Draw calls array, depends on textureId
  i                  # drawCounter    # Draw calls counter
  f                  # currentDepth   # Current depth value for next draw
‚ü©

rlMatrixMode                          ‚áê              "rlMatrixMode"                       _R‚ü®i‚ü©                                  # mode                                                                 # Choose the current matrix to be transformed
rlPushMatrix                          ‚áê              "rlPushMatrix"                       _R‚ü®‚ü©                                   #                                                                      # Push the current matrix to stack
rlPopMatrix                           ‚áê              "rlPopMatrix"                        _R‚ü®‚ü©                                   #                                                                      # Pop latest inserted matrix from stack
rlLoadIdentity                        ‚áê              "rlLoadIdentity"                     _R‚ü®‚ü©                                   #                                                                      # Reset current matrix to identity matrix
rlTranslatef                          ‚áê              "rlTranslatef"                       _R‚ü®f‚ãÑf‚ãÑf‚ü©                              # x y z                                                                # Multiply the current matrix by a translation matrix
rlRotatef                             ‚áê              "rlRotatef"                          _R‚ü®f‚ãÑf‚ãÑf‚ãÑf‚ü©                            # angle x y z                                                          # Multiply the current matrix by a rotation matrix
rlScalef                              ‚áê              "rlScalef"                           _R‚ü®f‚ãÑf‚ãÑf‚ü©                              # x y z                                                                # Multiply the current matrix by a scaling matrix
rlMultMatrixf                         ‚áê              "rlMultMatrixf"                      _R‚ü®"*"‚àæf‚ü©                              # matf                                                                 # Multiply the current matrix by another matrix
rlFrustum                             ‚áê              "rlFrustum"                          _R‚ü®"f64"‚ãÑ"f64"‚ãÑ"f64"‚ãÑ"f64"‚ãÑ"f64"‚ãÑ"f64"‚ü©# left right bottom top znear zfar                                     #
rlOrtho                               ‚áê              "rlOrtho"                            _R‚ü®"f64"‚ãÑ"f64"‚ãÑ"f64"‚ãÑ"f64"‚ãÑ"f64"‚ãÑ"f64"‚ü©# left right bottom top znear zfar                                     #
rlViewport                            ‚áê              "rlViewport"                         _R‚ü®i‚ãÑi‚ãÑi‚ãÑi‚ü©                            # x y width height                                                     # Set the viewport area
rlBegin                               ‚áê              "rlBegin"                            _R‚ü®i‚ü©                                  # mode                                                                 # Initialize drawing mode (how to organize vertex)
rlEnd                                 ‚áê              "rlEnd"                              _R‚ü®‚ü©                                   #                                                                      # Finish vertex providing
rlVertex2i                            ‚áê              "rlVertex2i"                         _R‚ü®i‚ãÑi‚ü©                                # x y                                                                  # Define one vertex (position) - 2 int
rlVertex2f                            ‚áê              "rlVertex2f"                         _R‚ü®f‚ãÑf‚ü©                                # x y                                                                  # Define one vertex (position) - 2 float
rlVertex3f                            ‚áê              "rlVertex3f"                         _R‚ü®f‚ãÑf‚ãÑf‚ü©                              # x y z                                                                # Define one vertex (position) - 3 float
rlTexCoord2f                          ‚áê              "rlTexCoord2f"                       _R‚ü®f‚ãÑf‚ü©                                # x y                                                                  # Define one vertex (texture coordinate) - 2 float
rlNormal3f                            ‚áê              "rlNormal3f"                         _R‚ü®f‚ãÑf‚ãÑf‚ü©                              # x y z                                                                # Define one vertex (normal) - 3 float
rlColor4ub                            ‚áê              "rlColor4ub"                         _R‚ü®u8‚ãÑu8‚ãÑu8‚ãÑu8‚ü©                        # r g b a                                                              # Define one vertex (color) - 4 byte
rlColor3f                             ‚áê              "rlColor3f"                          _R‚ü®f‚ãÑf‚ãÑf‚ü©                              # x y z                                                                # Define one vertex (color) - 3 float
rlColor4f                             ‚áê              "rlColor4f"                          _R‚ü®f‚ãÑf‚ãÑf‚ãÑf‚ü©                            # x y z w                                                              # Define one vertex (color) - 4 float
rlEnableVertexArray                   ‚áê bool         "rlEnableVertexArray"                _R‚ü®u‚ü©                                  # vaoId                                                                # Enable vertex array (VAO, if supported)
rlDisableVertexArray                  ‚áê              "rlDisableVertexArray"               _R‚ü®‚ü©                                   #                                                                      # Disable vertex array (VAO, if supported)
rlEnableVertexBuffer                  ‚áê              "rlEnableVertexBuffer"               _R‚ü®u‚ü©                                  # id                                                                   # Enable vertex buffer (VBO)
rlDisableVertexBuffer                 ‚áê              "rlDisableVertexBuffer"              _R‚ü®‚ü©                                   #                                                                      # Disable vertex buffer (VBO)
rlEnableVertexBufferElement           ‚áê              "rlEnableVertexBufferElement"        _R‚ü®u‚ü©                                  # id                                                                   # Enable vertex buffer element (VBO element)
rlDisableVertexBufferElement          ‚áê              "rlDisableVertexBufferElement"       _R‚ü®‚ü©                                   #                                                                      # Disable vertex buffer element (VBO element)
rlEnableVertexAttribute               ‚áê              "rlEnableVertexAttribute"            _R‚ü®u‚ü©                                  # index                                                                # Enable vertex attribute index
rlDisableVertexAttribute              ‚áê              "rlDisableVertexAttribute"           _R‚ü®u‚ü©                                  # index                                                                # Disable vertex attribute index
rlActiveTextureSlot                   ‚áê              "rlActiveTextureSlot"                _R‚ü®i‚ü©                                  # slot                                                                 # Select and active a texture slot
rlEnableTexture                       ‚áê              "rlEnableTexture"                    _R‚ü®u‚ü©                                  # id                                                                   # Enable texture
rlDisableTexture                      ‚áê              "rlDisableTexture"                   _R‚ü®‚ü©                                   #                                                                      # Disable texture
rlEnableTextureCubemap                ‚áê              "rlEnableTextureCubemap"             _R‚ü®u‚ü©                                  # id                                                                   # Enable texture cubemap
rlDisableTextureCubemap               ‚áê              "rlDisableTextureCubemap"            _R‚ü®‚ü©                                   #                                                                      # Disable texture cubemap
rlTextureParameters                   ‚áê              "rlTextureParameters"                _R‚ü®u‚ãÑi‚ãÑi‚ü©                              # id param value                                                       # Set texture parameters (filter, wrap)
rlCubemapParameters                   ‚áê              "rlCubemapParameters"                _R‚ü®u‚ãÑi‚ãÑi‚ü©                              # id param value                                                       # Set cubemap parameters (filter, wrap)
rlEnableShader                        ‚áê              "rlEnableShader"                     _R‚ü®u‚ü©                                  # id                                                                   # Enable shader program
rlDisableShader                       ‚áê              "rlDisableShader"                    _R‚ü®‚ü©                                   #                                                                      # Disable shader program
rlEnableFramebuffer                   ‚áê              "rlEnableFramebuffer"                _R‚ü®u‚ü©                                  # id                                                                   # Enable render texture (fbo)
rlDisableFramebuffer                  ‚áê              "rlDisableFramebuffer"               _R‚ü®‚ü©                                   #                                                                      # Disable render texture (fbo), return to default framebuffer
rlActiveDrawBuffers                   ‚áê              "rlActiveDrawBuffers"                _R‚ü®i‚ü©                                  # count                                                                # Activate multiple draw color buffers
rlBlitFramebuffer                     ‚áê              "rlBlitFramebuffer"                  _R‚ü®i‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ü©                  # srcX srcY srcWidth srcHeight dstX dstY dstWidth dstHeight bufferMask # Blit active framebuffer to main framebuffer
rlBindFramebuffer                     ‚áê              "rlBindFramebuffer"                  _R‚ü®u‚ãÑu‚ü©                                # target framebuffer                                                   # Bind framebuffer (FBO)
rlEnableColorBlend                    ‚áê              "rlEnableColorBlend"                 _R‚ü®‚ü©                                   #                                                                      # Enable color blending
rlDisableColorBlend                   ‚áê              "rlDisableColorBlend"                _R‚ü®‚ü©                                   #                                                                      # Disable color blending
rlEnableDepthTest                     ‚áê              "rlEnableDepthTest"                  _R‚ü®‚ü©                                   #                                                                      # Enable depth test
rlDisableDepthTest                    ‚áê              "rlDisableDepthTest"                 _R‚ü®‚ü©                                   #                                                                      # Disable depth test
rlEnableDepthMask                     ‚áê              "rlEnableDepthMask"                  _R‚ü®‚ü©                                   #                                                                      # Enable depth write
rlDisableDepthMask                    ‚áê              "rlDisableDepthMask"                 _R‚ü®‚ü©                                   #                                                                      # Disable depth write
rlEnableBackfaceCulling               ‚áê              "rlEnableBackfaceCulling"            _R‚ü®‚ü©                                   #                                                                      # Enable backface culling
rlDisableBackfaceCulling              ‚áê              "rlDisableBackfaceCulling"           _R‚ü®‚ü©                                   #                                                                      # Disable backface culling
rlColorMask                           ‚áê              "rlColorMask"                        _R‚ü®bool‚ãÑbool‚ãÑbool‚ãÑbool‚ü©                # r g b a                                                              # Color mask control
rlSetCullFace                         ‚áê              "rlSetCullFace"                      _R‚ü®i‚ü©                                  # mode                                                                 # Set face culling mode
rlEnableScissorTest                   ‚áê              "rlEnableScissorTest"                _R‚ü®‚ü©                                   #                                                                      # Enable scissor test
rlDisableScissorTest                  ‚áê              "rlDisableScissorTest"               _R‚ü®‚ü©                                   #                                                                      # Disable scissor test
rlScissor                             ‚áê              "rlScissor"                          _R‚ü®i‚ãÑi‚ãÑi‚ãÑi‚ü©                            # x y width height                                                     # Scissor test
rlEnableWireMode                      ‚áê              "rlEnableWireMode"                   _R‚ü®‚ü©                                   #                                                                      # Enable wire mode
rlEnablePointMode                     ‚áê              "rlEnablePointMode"                  _R‚ü®‚ü©                                   #                                                                      # Enable point mode
rlDisableWireMode                     ‚áê              "rlDisableWireMode"                  _R‚ü®‚ü©                                   #                                                                      # Disable wire mode ( and point ) maybe rename
rlSetLineWidth                        ‚áê              "rlSetLineWidth"                     _R‚ü®f‚ü©                                  # width                                                                # Set the line drawing width
rlGetLineWidth                        ‚áê f            "rlGetLineWidth"                     _R‚ü®‚ü©                                   #                                                                      # Get the line drawing width
rlEnableSmoothLines                   ‚áê              "rlEnableSmoothLines"                _R‚ü®‚ü©                                   #                                                                      # Enable line aliasing
rlDisableSmoothLines                  ‚áê              "rlDisableSmoothLines"               _R‚ü®‚ü©                                   #                                                                      # Disable line aliasing
rlEnableStereoRender                  ‚áê              "rlEnableStereoRender"               _R‚ü®‚ü©                                   #                                                                      # Enable stereo rendering
rlDisableStereoRender                 ‚áê              "rlDisableStereoRender"              _R‚ü®‚ü©                                   #                                                                      # Disable stereo rendering
rlIsStereoRenderEnabled               ‚áê bool         "rlIsStereoRenderEnabled"            _R‚ü®‚ü©                                   #                                                                      # Check if stereo render is enabled
rlClearColor                          ‚áê              "rlClearColor"                       _R‚ü®u8‚ãÑu8‚ãÑu8‚ãÑu8‚ü©                        # r g b a                                                              # Clear color buffer with color
rlClearScreenBuffers                  ‚áê              "rlClearScreenBuffers"               _R‚ü®‚ü©                                   #                                                                      # Clear used screen buffers (color and depth)
rlCheckErrors                         ‚áê              "rlCheckErrors"                      _R‚ü®‚ü©                                   #                                                                      # Check and log OpenGL error codes
rlSetBlendMode                        ‚áê              "rlSetBlendMode"                     _R‚ü®i‚ü©                                  # mode                                                                 # Set blending mode
rlSetBlendFactors                     ‚áê              "rlSetBlendFactors"                  _R‚ü®i‚ãÑi‚ãÑi‚ü©                              # glSrcFactor glDstFactor glEquation                                   # Set blending mode factor and equation (using OpenGL factors)
rlSetBlendFactorsSeparate             ‚áê              "rlSetBlendFactorsSeparate"          _R‚ü®i‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ü©                        # glSrcRGB glDstRGB glSrcAlpha glDstAlpha glEqRGB glEqAlpha            # Set blending mode factors and equations separately (using OpenGL factors)
rlglInit                              ‚áê              "rlglInit"                           _R‚ü®i‚ãÑi‚ü©                                # width height                                                         # Initialize rlgl (buffers, shaders, textures, states)
rlglClose                             ‚áê              "rlglClose"                          _R‚ü®‚ü©                                   #                                                                      # De-initialize rlgl (buffers, shaders, textures)
rlLoadExtensions                      ‚áê              "rlLoadExtensions"                   _R‚ü®ptr‚ü©                                # loader                                                               # Load OpenGL extensions (loader function required)
rlLoadExtensionsRef                   ‚áê              "rlLoadExtensions"                   _R‚ü®"&u8"‚ü©                              # loader                                                               # Load OpenGL extensions (loader function required)
rlGetVersion                          ‚áê i            "rlGetVersion"                       _R‚ü®‚ü©                                   #                                                                      # Get current OpenGL version
rlSetFramebufferWidth                 ‚áê              "rlSetFramebufferWidth"              _R‚ü®i‚ü©                                  # width                                                                # Set current framebuffer width
rlGetFramebufferWidth                 ‚áê i            "rlGetFramebufferWidth"              _R‚ü®‚ü©                                   #                                                                      # Get default framebuffer width
rlSetFramebufferHeight                ‚áê              "rlSetFramebufferHeight"             _R‚ü®i‚ü©                                  # height                                                               # Set current framebuffer height
rlGetFramebufferHeight                ‚áê i            "rlGetFramebufferHeight"             _R‚ü®‚ü©                                   #                                                                      # Get default framebuffer height
rlGetTextureIdDefault                 ‚áê u            "rlGetTextureIdDefault"              _R‚ü®‚ü©                                   #                                                                      # Get default texture id
rlGetShaderIdDefault                  ‚áê u            "rlGetShaderIdDefault"               _R‚ü®‚ü©                                   #                                                                      # Get default shader id
rlGetShaderLocsDefault                ‚áê ("*"‚àæi)      "rlGetShaderLocsDefault"             _R‚ü®‚ü©                                   #                                                                      # Get default shader locations
rlLoadRenderBatch                     ‚áê rlRenderBatch"rlLoadRenderBatch"                  _R‚ü®i‚ãÑi‚ü©                                # numBuffers bufferElements                                            # Load a render batch system
rlUnloadRenderBatch                   ‚áê              "rlUnloadRenderBatch"                _R‚ü®rlRenderBatch‚ü©                      # batch                                                                # Unload render batch system
rlDrawRenderBatch                     ‚áê              "rlDrawRenderBatch"                  _R‚ü®"*"‚àærlRenderBatch‚ü©                  # batch                                                                # Draw render batch data (Update->Draw->Reset)
rlDrawRenderBatchRef                  ‚áê              "rlDrawRenderBatch"                  _R‚ü®"&"‚àærlRenderBatch‚ü©                  # batch                                                                # Draw render batch data (Update->Draw->Reset)
rlSetRenderBatchActive                ‚áê              "rlSetRenderBatchActive"             _R‚ü®"*"‚àærlRenderBatch‚ü©                  # batch                                                                # Set the active render batch for rlgl (NULL for default internal)
rlSetRenderBatchActiveRef             ‚áê              "rlSetRenderBatchActive"             _R‚ü®"&"‚àærlRenderBatch‚ü©                  # batch                                                                # Set the active render batch for rlgl (NULL for default internal)
rlDrawRenderBatchActive               ‚áê              "rlDrawRenderBatchActive"            _R‚ü®‚ü©                                   #                                                                      # Update and draw internal render batch
rlCheckRenderBatchLimit               ‚áê bool         "rlCheckRenderBatchLimit"            _R‚ü®i‚ü©                                  # vCount                                                               # Check internal buffer overflow for a given number of vertex
rlSetTexture                          ‚áê              "rlSetTexture"                       _R‚ü®u‚ü©                                  # id                                                                   # Set current texture for render batch and check buffers limits
rlLoadVertexArray                     ‚áê u            "rlLoadVertexArray"                  _R‚ü®‚ü©                                   #                                                                      # Load vertex array (vao) if supported
rlLoadVertexBuffer                    ‚áê u            "rlLoadVertexBuffer"                 _R‚ü®ptr‚ãÑi‚ãÑbool‚ü©                         # buffer size dynamic                                                  # Load a vertex buffer object
rlLoadVertexBufferRaw                 ‚áê u            "rlLoadVertexBuffer"                 _R‚ü®"*i8"‚ãÑi‚ãÑbool‚ü©                       # buffer size dynamic                                                  # Load a vertex buffer object
rlLoadVertexBufferElement             ‚áê u            "rlLoadVertexBufferElement"          _R‚ü®ptr‚ãÑi‚ãÑbool‚ü©                         # buffer size dynamic                                                  # Load vertex buffer elements object
rlLoadVertexBufferElementRaw          ‚áê u            "rlLoadVertexBufferElement"          _R‚ü®"*i8"‚ãÑi‚ãÑbool‚ü©                       # buffer size dynamic                                                  # Load vertex buffer elements object
rlUpdateVertexBuffer                  ‚áê              "rlUpdateVertexBuffer"               _R‚ü®u‚ãÑptr‚ãÑi‚ãÑi‚ü©                          # bufferId data dataSize offset                                        # Update vertex buffer object data on GPU buffer
rlUpdateVertexBufferRaw               ‚áê              "rlUpdateVertexBuffer"               _R‚ü®u‚ãÑ"*i8"‚ãÑi‚ãÑi‚ü©                        # bufferId data dataSize offset                                        # Update vertex buffer object data on GPU buffer
rlUpdateVertexBufferElements          ‚áê              "rlUpdateVertexBufferElements"       _R‚ü®u‚ãÑptr‚ãÑi‚ãÑi‚ü©                          # id data dataSize offset                                              # Update vertex buffer elements data on GPU buffer
rlUpdateVertexBufferElementsRaw       ‚áê              "rlUpdateVertexBufferElements"       _R‚ü®u‚ãÑ"*i8"‚ãÑi‚ãÑi‚ü©                        # id data dataSize offset                                              # Update vertex buffer elements data on GPU buffer
rlUnloadVertexArray                   ‚áê              "rlUnloadVertexArray"                _R‚ü®u‚ü©                                  # vaoId                                                                # Unload vertex array (vao)
rlUnloadVertexBuffer                  ‚áê              "rlUnloadVertexBuffer"               _R‚ü®u‚ü©                                  # vboId                                                                # Unload vertex buffer object
rlSetVertexAttribute                  ‚áê              "rlSetVertexAttribute"               _R‚ü®u‚ãÑi‚ãÑi‚ãÑbool‚ãÑi‚ãÑptr‚ü©                   # index compSize type normalized stride pointer                        # Set vertex attribute data configuration
rlSetVertexAttributeRaw               ‚áê              "rlSetVertexAttribute"               _R‚ü®u‚ãÑi‚ãÑi‚ãÑbool‚ãÑi‚ãÑ"*i8"‚ü©                 # index compSize type normalized stride pointer                        # Set vertex attribute data configuration
rlSetVertexAttributeDivisor           ‚áê              "rlSetVertexAttributeDivisor"        _R‚ü®u‚ãÑi‚ü©                                # index divisor                                                        # Set vertex attribute data divisor
rlSetVertexAttributeDefault           ‚áê              "rlSetVertexAttributeDefault"        _R‚ü®i‚ãÑptr‚ãÑi‚ãÑi‚ü©                          # locIndex value attribType count                                      # Set vertex attribute default value, when attribute to provided
rlSetVertexAttributeDefaultRaw        ‚áê              "rlSetVertexAttributeDefault"        _R‚ü®i‚ãÑ"*i8"‚ãÑi‚ãÑi‚ü©                        # locIndex value attribType count                                      # Set vertex attribute default value, when attribute to provided
rlDrawVertexArray                     ‚áê              "rlDrawVertexArray"                  _R‚ü®i‚ãÑi‚ü©                                # offset count                                                         # Draw vertex array (currently active vao)
rlDrawVertexArrayElements             ‚áê              "rlDrawVertexArrayElements"          _R‚ü®i‚ãÑi‚ãÑptr‚ü©                            # offset count buffer                                                  # Draw vertex array elements
rlDrawVertexArrayElementsRaw          ‚áê              "rlDrawVertexArrayElements"          _R‚ü®i‚ãÑi‚ãÑ"*i8"‚ü©                          # offset count buffer                                                  # Draw vertex array elements
rlDrawVertexArrayInstanced            ‚áê              "rlDrawVertexArrayInstanced"         _R‚ü®i‚ãÑi‚ãÑi‚ü©                              # offset count instances                                               # Draw vertex array (currently active vao) with instancing
rlDrawVertexArrayElementsInstanced    ‚áê              "rlDrawVertexArrayElementsInstanced" _R‚ü®i‚ãÑi‚ãÑptr‚ãÑi‚ü©                          # offset count buffer instances                                        # Draw vertex array elements with instancing
rlDrawVertexArrayElementsInstancedRaw ‚áê              "rlDrawVertexArrayElementsInstanced" _R‚ü®i‚ãÑi‚ãÑ"*i8"‚ãÑi‚ü©                        # offset count buffer instances                                        # Draw vertex array elements with instancing
rlLoadTexture                         ‚áê u            "rlLoadTexture"                      _R‚ü®ptr‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ü©                        # data width height format mipmapCount                                 # Load texture data
rlLoadTextureRaw                      ‚áê u            "rlLoadTexture"                      _R‚ü®"*i8"‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ü©                      # data width height format mipmapCount                                 # Load texture data
rlLoadTextureDepth                    ‚áê u            "rlLoadTextureDepth"                 _R‚ü®i‚ãÑi‚ãÑbool‚ü©                           # width height useRenderBuffer                                         # Load depth texture/renderbuffer (to be attached to fbo)
rlLoadTextureCubemap                  ‚áê u            "rlLoadTextureCubemap"               _R‚ü®ptr‚ãÑi‚ãÑi‚ü©                            # data size format                                                     # Load texture cubemap data
rlLoadTextureCubemapRaw               ‚áê u            "rlLoadTextureCubemap"               _R‚ü®"*i8"‚ãÑi‚ãÑi‚ü©                          # data size format                                                     # Load texture cubemap data
rlUpdateTexture                       ‚áê              "rlUpdateTexture"                    _R‚ü®u‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ãÑptr‚ü©                    # id offsetX offsetY width height format data                          # Update texture with new data on GPU
rlUpdateTextureRaw                    ‚áê              "rlUpdateTexture"                    _R‚ü®u‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ãÑi‚ãÑ"*i8"‚ü©                  # id offsetX offsetY width height format data                          # Update texture with new data on GPU
rlGetGlTextureFormats                 ‚áê              "rlGetGlTextureFormats"              _R‚ü®i‚ãÑ"*"‚àæu‚ãÑ"*"‚àæu‚ãÑ"*"‚àæu‚ü©                # format glInternalFormat glFormat glType                              # Get OpenGL internal formats
rlGetGlTextureFormatsRef              ‚áê              "rlGetGlTextureFormats"              _R‚ü®i‚ãÑ"&"‚àæu‚ãÑ"&"‚àæu‚ãÑ"&"‚àæu‚ü©                # format glInternalFormat glFormat glType                              # Get OpenGL internal formats
rlGetPixelFormatName                  ‚áê (ptr‚ä£str)    "rlGetPixelFormatName"               _R‚ü®u‚ü©                                  # format                                                               # Get name string for pixel format
rlUnloadTexture                       ‚áê              "rlUnloadTexture"                    _R‚ü®u‚ü©                                  # id                                                                   # Unload texture from GPU memory
rlGenTextureMipmaps                   ‚áê              "rlGenTextureMipmaps"                _R‚ü®u‚ãÑi‚ãÑi‚ãÑi‚ãÑ"*"‚àæi‚ü©                      # id width height format mipmaps                                       # Generate mipmap data for selected texture
rlGenTextureMipmapsRef                ‚áê              "rlGenTextureMipmaps"                _R‚ü®u‚ãÑi‚ãÑi‚ãÑi‚ãÑ"&"‚àæi‚ü©                      # id width height format mipmaps                                       # Generate mipmap data for selected texture
rlReadTexturePixels                   ‚áê ptr          "rlReadTexturePixels"                _R‚ü®u‚ãÑi‚ãÑi‚ãÑi‚ü©                            # id width height format                                               # Read texture pixel data
rlReadScreenPixels                    ‚áê (ptr‚ä£ustr)   "rlReadScreenPixels"                 _R‚ü®i‚ãÑi‚ü©                                # width height                                                         # Read screen pixel data (color buffer)
rlLoadFramebuffer                     ‚áê u            "rlLoadFramebuffer"                  _R‚ü®i‚ãÑi‚ü©                                # width height                                                         # Load an empty framebuffer
rlFramebufferAttach                   ‚áê              "rlFramebufferAttach"                _R‚ü®u‚ãÑu‚ãÑi‚ãÑi‚ãÑi‚ü©                          # fboId texId attachType texType mipLevel                              # Attach texture/renderbuffer to a framebuffer
rlFramebufferComplete                 ‚áê bool         "rlFramebufferComplete"              _R‚ü®u‚ü©                                  # id                                                                   # Verify framebuffer is complete
rlUnloadFramebuffer                   ‚áê              "rlUnloadFramebuffer"                _R‚ü®u‚ü©                                  # id                                                                   # Delete framebuffer from GPU
rlLoadShaderCode                      ‚áê u            "rlLoadShaderCode"                   _R‚ü®str‚ãÑstr‚ü©                            # vsCode fsCode                                                        # Load shader from code strings
rlCompileShader                       ‚áê u            "rlCompileShader"                    _R‚ü®str‚ãÑi‚ü©                              # shaderCode type                                                      # Compile custom shader and return shader id (type: RL_VERTEX_SHADER, RL_FRAGMENT_SHADER, RL_COMPUTE_SHADER)
rlLoadShaderProgram                   ‚áê u            "rlLoadShaderProgram"                _R‚ü®u‚ãÑu‚ü©                                # vShaderId fShaderId                                                  # Load custom shader program
rlUnloadShaderProgram                 ‚áê              "rlUnloadShaderProgram"              _R‚ü®u‚ü©                                  # id                                                                   # Unload shader program
rlGetLocationUniform                  ‚áê i            "rlGetLocationUniform"               _R‚ü®u‚ãÑstr‚ü©                              # shaderId uniformName                                                 # Get shader location uniform
rlGetLocationAttrib                   ‚áê i            "rlGetLocationAttrib"                _R‚ü®u‚ãÑstr‚ü©                              # shaderId attribName                                                  # Get shader location attribute
rlSetUniform                          ‚áê              "rlSetUniform"                       _R‚ü®i‚ãÑptr‚ãÑi‚ãÑi‚ü©                          # locIndex value uniformType count                                     # Set shader value uniform
rlSetUniformRaw                       ‚áê              "rlSetUniform"                       _R‚ü®i‚ãÑ"*i8"‚ãÑi‚ãÑi‚ü©                        # locIndex value uniformType count                                     # Set shader value uniform
rlSetUniformMatrix                    ‚áê              "rlSetUniformMatrix"                 _R‚ü®i‚ãÑmatrix‚ü©                           # locIndex mat                                                         # Set shader value matrix
rlSetUniformSampler                   ‚áê              "rlSetUniformSampler"                _R‚ü®i‚ãÑu‚ü©                                # locIndex textureId                                                   # Set shader value sampler
rlSetShader                           ‚áê              "rlSetShader"                        _R‚ü®u‚ãÑ"*"‚àæi‚ü©                            # id locs                                                              # Set shader currently active (id and locations)
rlSetShaderRef                        ‚áê              "rlSetShader"                        _R‚ü®u‚ãÑ"&"‚àæi‚ü©                            # id locs                                                              # Set shader currently active (id and locations)
rlLoadComputeShaderProgram            ‚áê u            "rlLoadComputeShaderProgram"         _R‚ü®u‚ü©                                  # shaderId                                                             # Load compute shader program
rlComputeShaderDispatch               ‚áê              "rlComputeShaderDispatch"            _R‚ü®u‚ãÑu‚ãÑu‚ü©                              # groupX groupY groupZ                                                 # Dispatch compute shader (equivalent to *draw* for graphics pipeline)
rlLoadShaderBuffer                    ‚áê u            "rlLoadShaderBuffer"                 _R‚ü®u‚ãÑptr‚ãÑi‚ü©                            # size data usageHint                                                  # Load shader storage buffer object (SSBO)
rlLoadShaderBufferRaw                 ‚áê u            "rlLoadShaderBuffer"                 _R‚ü®u‚ãÑ"*i8"‚ãÑi‚ü©                          # size data usageHint                                                  # Load shader storage buffer object (SSBO)
rlUnloadShaderBuffer                  ‚áê              "rlUnloadShaderBuffer"               _R‚ü®u‚ü©                                  # ssboId                                                               # Unload shader storage buffer object (SSBO)
rlUpdateShaderBuffer                  ‚áê              "rlUpdateShaderBuffer"               _R‚ü®u‚ãÑptr‚ãÑu‚ãÑu‚ü©                          # id data dataSize offset                                              # Update SSBO buffer data
rlUpdateShaderBufferRaw               ‚áê              "rlUpdateShaderBuffer"               _R‚ü®u‚ãÑ"*i8"‚ãÑu‚ãÑu‚ü©                        # id data dataSize offset                                              # Update SSBO buffer data
rlBindShaderBuffer                    ‚áê              "rlBindShaderBuffer"                 _R‚ü®u‚ãÑu‚ü©                                # id index                                                             # Bind SSBO buffer
rlReadShaderBuffer                    ‚áê              "rlReadShaderBuffer"                 _R‚ü®u‚ãÑptr‚ãÑu‚ãÑu‚ü©                          # id dest count offset                                                 # Read SSBO buffer data (GPU->CPU)
rlReadShaderBufferRef                 ‚áê              "rlReadShaderBuffer"                 _R‚ü®u‚ãÑ"&u8"‚ãÑu‚ãÑu‚ü©                        # id dest count offset                                                 # Read SSBO buffer data (GPU->CPU)
rlCopyShaderBuffer                    ‚áê              "rlCopyShaderBuffer"                 _R‚ü®u‚ãÑu‚ãÑu‚ãÑu‚ãÑu‚ü©                          # destId srcId destOffset srcOffset count                              # Copy SSBO data between buffers
rlGetShaderBufferSize                 ‚áê u            "rlGetShaderBufferSize"              _R‚ü®u‚ü©                                  # id                                                                   # Get SSBO buffer size
rlBindImageTexture                    ‚áê              "rlBindImageTexture"                 _R‚ü®u‚ãÑu‚ãÑi‚ãÑbool‚ü©                         # id index format readonly                                             # Bind image texture
rlGetMatrixModelview                  ‚áê matrix       "rlGetMatrixModelview"               _R‚ü®‚ü©                                   #                                                                      # Get internal modelview matrix
rlGetMatrixProjection                 ‚áê matrix       "rlGetMatrixProjection"              _R‚ü®‚ü©                                   #                                                                      # Get internal projection matrix
rlGetMatrixTransform                  ‚áê matrix       "rlGetMatrixTransform"               _R‚ü®‚ü©                                   #                                                                      # Get internal accumulated transform matrix
rlGetMatrixProjectionStereo           ‚áê matrix       "rlGetMatrixProjectionStereo"        _R‚ü®i‚ü©                                  # eye                                                                  # Get internal projection matrix for stereo render (selected eye)
rlGetMatrixViewOffsetStereo           ‚áê matrix       "rlGetMatrixViewOffsetStereo"        _R‚ü®i‚ü©                                  # eye                                                                  # Get internal view offset matrix for stereo render (selected eye)
rlSetMatrixProjection                 ‚áê              "rlSetMatrixProjection"              _R‚ü®matrix‚ü©                             # proj                                                                 # Set a custom projection matrix (replaces internal projection matrix)
rlSetMatrixModelview                  ‚áê              "rlSetMatrixModelview"               _R‚ü®matrix‚ü©                             # view                                                                 # Set a custom modelview matrix (replaces internal modelview matrix)
rlSetMatrixProjectionStereo           ‚áê              "rlSetMatrixProjectionStereo"        _R‚ü®matrix‚ãÑmatrix‚ü©                      # right left                                                           # Set eyes projection matrices for stereo rendering
rlSetMatrixViewOffsetStereo           ‚áê              "rlSetMatrixViewOffsetStereo"        _R‚ü®matrix‚ãÑmatrix‚ü©                      # right left                                                           # Set eyes view offsets matrices for stereo rendering
rlLoadDrawCube                        ‚áê              "rlLoadDrawCube"                     _R‚ü®‚ü©                                   #                                                                      # Load and draw a cube
rlLoadDrawQuad                        ‚áê              "rlLoadDrawQuad"                     _R‚ü®‚ü©                                   #                                                                      # Load and draw a quad
