#### THIS TEXT HAS BEEN AUTOGENERATED ####

# Makes an importer that improves the ffi function creation syntax
MakeImporter ‚áê {debugùïäpathToBin: # Debug is useful for Segmentation Faults
  NestedStructToStr ‚Üê {
    1‚â•‚â°ùï©?ùï©;
    lists‚Äøatoms ‚Üê √ó‚àò‚â°¬®‚ä∏(/ ‚ãà ¬¨‚ä∏/)ùï©
    atoms‚àæ'{'‚àæ'}'¬´‚àæ','‚àæ¬®ùïä¬®lists
  }
  NestedStructToStrRet ‚Üê {
    1‚â•‚â°ùï©?ùï©;
    lists‚Äøatoms ‚Üê √ó‚àò‚â°¬®‚ä∏(/ ‚ãà ¬¨‚ä∏/)ùï©
    atoms‚àæ'{'‚àæ'}'¬´‚àæ','‚àæ¬®ùïä¬®"*"‚çü("*i8:c8"‚ä∏‚â°‚à®"*u8:c8"‚ä∏‚â°)¬®lists
  }

  {ùï® funcName _ùï£ inpTypes: outType‚Üêùï®‚ä£‚ü®‚ü©
    a‚Üê'>'‚ä∏‚àæ‚åæ‚äë‚çü(1=‚â†) NestedStructToStr¬®ùï©
    HandleError ‚Üê {
      ‚Ä¢Out "DEBUG TYPE INFO:"
      ‚Ä¢Out ‚Ä¢Fmt ùï©
      ‚Ä¢Out "END OF DEBUG TYPE INFO; BEGINING WITH FULL ERROR:"
      ‚Ä¢term.Flush@
      ùï®‚Ä¢FFIùï©
    }
    func ‚Üê pathToBin ‚Ä¢FFI‚éäHandleError ‚ü® NestedStructToStrRet outType‚ãÑfuncName‚ü©‚àæa
    m ‚Üê str‚ä∏‚â°¬®a
    IfDebug ‚Üê {‚Ä¢term.Flush@‚ä£‚Ä¢Out funcName ‚ãÑ ùïè‚ä£‚Ä¢term.Flush‚àò@‚ä£‚Ä¢Out‚àòfuncName}
    IfDebug‚çüdebug {ùïè‚àæ‚üú@}‚çü(a‚â°‚ãà'>'‚àæstr) {ùïè‚àæ‚üú@¬®‚åæ(m‚ä∏/)}‚çü(‚à®¬¥m) func
  }
}

# predefined C types
bool ‚áê "i8"
c    ‚áê "i8"
i    ‚áê "i32"
f    ‚áê "f32"
u    ‚áê "u32"
i8   ‚áê "i8"
u8   ‚áê "u8"
str  ‚áê "*i8:c8"
uStr ‚áê "*u8:c8"
ptr  ‚áê "*"

pathToBinary ‚áê ‚äë‚Ä¢args
r ‚áê 0 MakeImporter pathToBinary

##################################
# End of setup for easy ffi.     #
# Begining of autogenerated ffi. #
##################################

ePSILON ‚áê 1e-6 #


v2 ‚áê ‚ü® # Vector2 type
  f # x  #
  f # y  #
‚ü©
v3 ‚áê ‚ü® # Vector3 type
  f # x  #
  f # y  #
  f # z  #
‚ü©
v4 ‚áê ‚ü® # Vector4 type
  f # x  #
  f # y  #
  f # z  #
  f # w  #
‚ü©
quaternion ‚áê v4 # Quaternion type
matrix ‚áê ‚ü® # Matrix type (OpenGL style 4x4 - right handed, column major)
  f # m0   # Matrix first row (4 components)
  f # m4   # Matrix first row (4 components)
  f # m8   # Matrix first row (4 components)
  f # m12  # Matrix first row (4 components)
  f # m1   # Matrix second row (4 components)
  f # m5   # Matrix second row (4 components)
  f # m9   # Matrix second row (4 components)
  f # m13  # Matrix second row (4 components)
  f # m2   # Matrix third row (4 components)
  f # m6   # Matrix third row (4 components)
  f # m10  # Matrix third row (4 components)
  f # m14  # Matrix third row (4 components)
  f # m3   # Matrix fourth row (4 components)
  f # m7   # Matrix fourth row (4 components)
  f # m11  # Matrix fourth row (4 components)
  f # m15  # Matrix fourth row (4 components)
‚ü©
float3 ‚áê ‚ü® # NOTE: Helper types to be used instead of array return types for *ToFloat functions
  "[3]"‚àæf # v  #
‚ü©
float16 ‚áê ‚ü® #
  "[16]"‚àæf # v  #
‚ü©

clamp                          ‚áê f         "Clamp"                          _R‚ü®f‚ãÑf‚ãÑf‚ü©                                        # value min max                                   #
lerp                           ‚áê f         "Lerp"                           _R‚ü®f‚ãÑf‚ãÑf‚ü©                                        # start end amount                                #
normalize                      ‚áê f         "Normalize"                      _R‚ü®f‚ãÑf‚ãÑf‚ü©                                        # value start end                                 #
remap                          ‚áê f         "Remap"                          _R‚ü®f‚ãÑf‚ãÑf‚ãÑf‚ãÑf‚ü©                                    # value inputStart inputEnd outputStart outputEnd #
wrap                           ‚áê f         "Wrap"                           _R‚ü®f‚ãÑf‚ãÑf‚ü©                                        # value min max                                   #
floatEquals                    ‚áê i         "FloatEquals"                    _R‚ü®f‚ãÑf‚ü©                                          # x y                                             #
vector2Zero                    ‚áê v2        "Vector2Zero"                    _R‚ü®‚ü©                                             #                                                 #
vector2One                     ‚áê v2        "Vector2One"                     _R‚ü®‚ü©                                             #                                                 #
vector2Add                     ‚áê v2        "Vector2Add"                     _R‚ü®v2‚ãÑv2‚ü©                                        # v1 v2                                           #
vector2AddValue                ‚áê v2        "Vector2AddValue"                _R‚ü®v2‚ãÑf‚ü©                                         # v add                                           #
vector2Subtract                ‚áê v2        "Vector2Subtract"                _R‚ü®v2‚ãÑv2‚ü©                                        # v1 v2                                           #
vector2SubtractValue           ‚áê v2        "Vector2SubtractValue"           _R‚ü®v2‚ãÑf‚ü©                                         # v sub                                           #
vector2Length                  ‚áê f         "Vector2Length"                  _R‚ü®v2‚ü©                                           # v                                               #
vector2LengthSqr               ‚áê f         "Vector2LengthSqr"               _R‚ü®v2‚ü©                                           # v                                               #
vector2DotProduct              ‚áê f         "Vector2DotProduct"              _R‚ü®v2‚ãÑv2‚ü©                                        # v1 v2                                           #
vector2Distance                ‚áê f         "Vector2Distance"                _R‚ü®v2‚ãÑv2‚ü©                                        # v1 v2                                           #
vector2DistanceSqr             ‚áê f         "Vector2DistanceSqr"             _R‚ü®v2‚ãÑv2‚ü©                                        # v1 v2                                           #
vector2Angle                   ‚áê f         "Vector2Angle"                   _R‚ü®v2‚ãÑv2‚ü©                                        # v1 v2                                           #
vector2LineAngle               ‚áê f         "Vector2LineAngle"               _R‚ü®v2‚ãÑv2‚ü©                                        # start end                                       #
vector2Scale                   ‚áê v2        "Vector2Scale"                   _R‚ü®v2‚ãÑf‚ü©                                         # v scale                                         #
vector2Multiply                ‚áê v2        "Vector2Multiply"                _R‚ü®v2‚ãÑv2‚ü©                                        # v1 v2                                           #
vector2Negate                  ‚áê v2        "Vector2Negate"                  _R‚ü®v2‚ü©                                           # v                                               #
vector2Divide                  ‚áê v2        "Vector2Divide"                  _R‚ü®v2‚ãÑv2‚ü©                                        # v1 v2                                           #
vector2Normalize               ‚áê v2        "Vector2Normalize"               _R‚ü®v2‚ü©                                           # v                                               #
vector2Transform               ‚áê v2        "Vector2Transform"               _R‚ü®v2‚ãÑmatrix‚ü©                                    # v mat                                           #
vector2Lerp                    ‚áê v2        "Vector2Lerp"                    _R‚ü®v2‚ãÑv2‚ãÑf‚ü©                                      # v1 v2 amount                                    #
vector2Reflect                 ‚áê v2        "Vector2Reflect"                 _R‚ü®v2‚ãÑv2‚ü©                                        # v normal                                        #
vector2Min                     ‚áê v2        "Vector2Min"                     _R‚ü®v2‚ãÑv2‚ü©                                        # v1 v2                                           #
vector2Max                     ‚áê v2        "Vector2Max"                     _R‚ü®v2‚ãÑv2‚ü©                                        # v1 v2                                           #
vector2Rotate                  ‚áê v2        "Vector2Rotate"                  _R‚ü®v2‚ãÑf‚ü©                                         # v angle                                         #
vector2MoveTowards             ‚áê v2        "Vector2MoveTowards"             _R‚ü®v2‚ãÑv2‚ãÑf‚ü©                                      # v target maxDistance                            #
vector2Invert                  ‚áê v2        "Vector2Invert"                  _R‚ü®v2‚ü©                                           # v                                               #
vector2Clamp                   ‚áê v2        "Vector2Clamp"                   _R‚ü®v2‚ãÑv2‚ãÑv2‚ü©                                     # v min max                                       #
vector2ClampValue              ‚áê v2        "Vector2ClampValue"              _R‚ü®v2‚ãÑf‚ãÑf‚ü©                                       # v min max                                       #
vector2Equals                  ‚áê i         "Vector2Equals"                  _R‚ü®v2‚ãÑv2‚ü©                                        # p q                                             #
vector2Refract                 ‚áê v2        "Vector2Refract"                 _R‚ü®v2‚ãÑv2‚ãÑf‚ü©                                      # v n r                                           #
vector3Zero                    ‚áê v3        "Vector3Zero"                    _R‚ü®‚ü©                                             #                                                 #
vector3One                     ‚áê v3        "Vector3One"                     _R‚ü®‚ü©                                             #                                                 #
vector3Add                     ‚áê v3        "Vector3Add"                     _R‚ü®v3‚ãÑv3‚ü©                                        # v1 v2                                           #
vector3AddValue                ‚áê v3        "Vector3AddValue"                _R‚ü®v3‚ãÑf‚ü©                                         # v add                                           #
vector3Subtract                ‚áê v3        "Vector3Subtract"                _R‚ü®v3‚ãÑv3‚ü©                                        # v1 v2                                           #
vector3SubtractValue           ‚áê v3        "Vector3SubtractValue"           _R‚ü®v3‚ãÑf‚ü©                                         # v sub                                           #
vector3Scale                   ‚áê v3        "Vector3Scale"                   _R‚ü®v3‚ãÑf‚ü©                                         # v scalar                                        #
vector3Multiply                ‚áê v3        "Vector3Multiply"                _R‚ü®v3‚ãÑv3‚ü©                                        # v1 v2                                           #
vector3CrossProduct            ‚áê v3        "Vector3CrossProduct"            _R‚ü®v3‚ãÑv3‚ü©                                        # v1 v2                                           #
vector3Perpendicular           ‚áê v3        "Vector3Perpendicular"           _R‚ü®v3‚ü©                                           # v                                               #
vector3Length                  ‚áê f         "Vector3Length"                  _R‚ü®v3‚ü©                                           # v                                               #
vector3LengthSqr               ‚áê f         "Vector3LengthSqr"               _R‚ü®v3‚ü©                                           # v                                               #
vector3DotProduct              ‚áê f         "Vector3DotProduct"              _R‚ü®v3‚ãÑv3‚ü©                                        # v1 v2                                           #
vector3Distance                ‚áê f         "Vector3Distance"                _R‚ü®v3‚ãÑv3‚ü©                                        # v1 v2                                           #
vector3DistanceSqr             ‚áê f         "Vector3DistanceSqr"             _R‚ü®v3‚ãÑv3‚ü©                                        # v1 v2                                           #
vector3Angle                   ‚áê f         "Vector3Angle"                   _R‚ü®v3‚ãÑv3‚ü©                                        # v1 v2                                           #
vector3Negate                  ‚áê v3        "Vector3Negate"                  _R‚ü®v3‚ü©                                           # v                                               #
vector3Divide                  ‚áê v3        "Vector3Divide"                  _R‚ü®v3‚ãÑv3‚ü©                                        # v1 v2                                           #
vector3Normalize               ‚áê v3        "Vector3Normalize"               _R‚ü®v3‚ü©                                           # v                                               #
vector3Project                 ‚áê v3        "Vector3Project"                 _R‚ü®v3‚ãÑv3‚ü©                                        # v1 v2                                           #
vector3Reject                  ‚áê v3        "Vector3Reject"                  _R‚ü®v3‚ãÑv3‚ü©                                        # v1 v2                                           #
vector3OrthoNormalize          ‚áê           "Vector3OrthoNormalize"          _R‚ü®"*"‚àæv3‚ãÑ"*"‚àæv3‚ü©                                # v1 v2                                           #
vector3OrthoNormalizeRef       ‚áê           "Vector3OrthoNormalize"          _R‚ü®"&"‚àæv3‚ãÑ"&"‚àæv3‚ü©                                # v1 v2                                           #
vector3Transform               ‚áê v3        "Vector3Transform"               _R‚ü®v3‚ãÑmatrix‚ü©                                    # v mat                                           #
vector3RotateByQuaternion      ‚áê v3        "Vector3RotateByQuaternion"      _R‚ü®v3‚ãÑquaternion‚ü©                                # v q                                             #
vector3RotateByAxisAngle       ‚áê v3        "Vector3RotateByAxisAngle"       _R‚ü®v3‚ãÑv3‚ãÑf‚ü©                                      # v axis angle                                    #
vector3MoveTowards             ‚áê v3        "Vector3MoveTowards"             _R‚ü®v3‚ãÑv3‚ãÑf‚ü©                                      # v target maxDistance                            #
vector3Lerp                    ‚áê v3        "Vector3Lerp"                    _R‚ü®v3‚ãÑv3‚ãÑf‚ü©                                      # v1 v2 amount                                    #
vector3CubicHermite            ‚áê v3        "Vector3CubicHermite"            _R‚ü®v3‚ãÑv3‚ãÑv3‚ãÑv3‚ãÑf‚ü©                                # v1 tangent1 v2 tangent2 amount                  #
vector3Reflect                 ‚áê v3        "Vector3Reflect"                 _R‚ü®v3‚ãÑv3‚ü©                                        # v normal                                        #
vector3Min                     ‚áê v3        "Vector3Min"                     _R‚ü®v3‚ãÑv3‚ü©                                        # v1 v2                                           #
vector3Max                     ‚áê v3        "Vector3Max"                     _R‚ü®v3‚ãÑv3‚ü©                                        # v1 v2                                           #
vector3Barycenter              ‚áê v3        "Vector3Barycenter"              _R‚ü®v3‚ãÑv3‚ãÑv3‚ãÑv3‚ü©                                  # p a b c                                         #
vector3Unproject               ‚áê v3        "Vector3Unproject"               _R‚ü®v3‚ãÑmatrix‚ãÑmatrix‚ü©                             # source projection view                          #
vector3ToFloatV                ‚áê float3    "Vector3ToFloatV"                _R‚ü®v3‚ü©                                           # v                                               #
vector3Invert                  ‚áê v3        "Vector3Invert"                  _R‚ü®v3‚ü©                                           # v                                               #
vector3Clamp                   ‚áê v3        "Vector3Clamp"                   _R‚ü®v3‚ãÑv3‚ãÑv3‚ü©                                     # v min max                                       #
vector3ClampValue              ‚áê v3        "Vector3ClampValue"              _R‚ü®v3‚ãÑf‚ãÑf‚ü©                                       # v min max                                       #
vector3Equals                  ‚áê i         "Vector3Equals"                  _R‚ü®v3‚ãÑv3‚ü©                                        # p q                                             #
vector3Refract                 ‚áê v3        "Vector3Refract"                 _R‚ü®v3‚ãÑv3‚ãÑf‚ü©                                      # v n r                                           #
vector4Zero                    ‚áê v4        "Vector4Zero"                    _R‚ü®‚ü©                                             #                                                 #
vector4One                     ‚áê v4        "Vector4One"                     _R‚ü®‚ü©                                             #                                                 #
vector4Add                     ‚áê v4        "Vector4Add"                     _R‚ü®v4‚ãÑv4‚ü©                                        # v1 v2                                           #
vector4AddValue                ‚áê v4        "Vector4AddValue"                _R‚ü®v4‚ãÑf‚ü©                                         # v add                                           #
vector4Subtract                ‚áê v4        "Vector4Subtract"                _R‚ü®v4‚ãÑv4‚ü©                                        # v1 v2                                           #
vector4SubtractValue           ‚áê v4        "Vector4SubtractValue"           _R‚ü®v4‚ãÑf‚ü©                                         # v add                                           #
vector4Length                  ‚áê f         "Vector4Length"                  _R‚ü®v4‚ü©                                           # v                                               #
vector4LengthSqr               ‚áê f         "Vector4LengthSqr"               _R‚ü®v4‚ü©                                           # v                                               #
vector4DotProduct              ‚áê f         "Vector4DotProduct"              _R‚ü®v4‚ãÑv4‚ü©                                        # v1 v2                                           #
vector4Distance                ‚áê f         "Vector4Distance"                _R‚ü®v4‚ãÑv4‚ü©                                        # v1 v2                                           #
vector4DistanceSqr             ‚áê f         "Vector4DistanceSqr"             _R‚ü®v4‚ãÑv4‚ü©                                        # v1 v2                                           #
vector4Scale                   ‚áê v4        "Vector4Scale"                   _R‚ü®v4‚ãÑf‚ü©                                         # v scale                                         #
vector4Multiply                ‚áê v4        "Vector4Multiply"                _R‚ü®v4‚ãÑv4‚ü©                                        # v1 v2                                           #
vector4Negate                  ‚áê v4        "Vector4Negate"                  _R‚ü®v4‚ü©                                           # v                                               #
vector4Divide                  ‚áê v4        "Vector4Divide"                  _R‚ü®v4‚ãÑv4‚ü©                                        # v1 v2                                           #
vector4Normalize               ‚áê v4        "Vector4Normalize"               _R‚ü®v4‚ü©                                           # v                                               #
vector4Min                     ‚áê v4        "Vector4Min"                     _R‚ü®v4‚ãÑv4‚ü©                                        # v1 v2                                           #
vector4Max                     ‚áê v4        "Vector4Max"                     _R‚ü®v4‚ãÑv4‚ü©                                        # v1 v2                                           #
vector4Lerp                    ‚áê v4        "Vector4Lerp"                    _R‚ü®v4‚ãÑv4‚ãÑf‚ü©                                      # v1 v2 amount                                    #
vector4MoveTowards             ‚áê v4        "Vector4MoveTowards"             _R‚ü®v4‚ãÑv4‚ãÑf‚ü©                                      # v target maxDistance                            #
vector4Invert                  ‚áê v4        "Vector4Invert"                  _R‚ü®v4‚ü©                                           # v                                               #
vector4Equals                  ‚áê i         "Vector4Equals"                  _R‚ü®v4‚ãÑv4‚ü©                                        # p q                                             #
matrixDeterminant              ‚áê f         "MatrixDeterminant"              _R‚ü®matrix‚ü©                                       # mat                                             #
matrixTrace                    ‚áê f         "MatrixTrace"                    _R‚ü®matrix‚ü©                                       # mat                                             #
matrixTranspose                ‚áê matrix    "MatrixTranspose"                _R‚ü®matrix‚ü©                                       # mat                                             #
matrixInvert                   ‚áê matrix    "MatrixInvert"                   _R‚ü®matrix‚ü©                                       # mat                                             #
matrixIdentity                 ‚áê matrix    "MatrixIdentity"                 _R‚ü®‚ü©                                             #                                                 #
matrixAdd                      ‚áê matrix    "MatrixAdd"                      _R‚ü®matrix‚ãÑmatrix‚ü©                                # left right                                      #
matrixSubtract                 ‚áê matrix    "MatrixSubtract"                 _R‚ü®matrix‚ãÑmatrix‚ü©                                # left right                                      #
matrixMultiply                 ‚áê matrix    "MatrixMultiply"                 _R‚ü®matrix‚ãÑmatrix‚ü©                                # left right                                      #
matrixTranslate                ‚áê matrix    "MatrixTranslate"                _R‚ü®f‚ãÑf‚ãÑf‚ü©                                        # x y z                                           #
matrixRotate                   ‚áê matrix    "MatrixRotate"                   _R‚ü®v3‚ãÑf‚ü©                                         # axis angle                                      #
matrixRotateX                  ‚áê matrix    "MatrixRotateX"                  _R‚ü®f‚ü©                                            # angle                                           #
matrixRotateY                  ‚áê matrix    "MatrixRotateY"                  _R‚ü®f‚ü©                                            # angle                                           #
matrixRotateZ                  ‚áê matrix    "MatrixRotateZ"                  _R‚ü®f‚ü©                                            # angle                                           #
matrixRotateXYZ                ‚áê matrix    "MatrixRotateXYZ"                _R‚ü®v3‚ü©                                           # angle                                           #
matrixRotateZYX                ‚áê matrix    "MatrixRotateZYX"                _R‚ü®v3‚ü©                                           # angle                                           #
matrixScale                    ‚áê matrix    "MatrixScale"                    _R‚ü®f‚ãÑf‚ãÑf‚ü©                                        # x y z                                           #
matrixFrustum                  ‚áê matrix    "MatrixFrustum"                  _R‚ü®"f64"‚ãÑ"f64"‚ãÑ"f64"‚ãÑ"f64"‚ãÑ"f64"‚ãÑ"f64"‚ü©          # left right bottom top near far                  #
matrixPerspective              ‚áê matrix    "MatrixPerspective"              _R‚ü®"f64"‚ãÑ"f64"‚ãÑ"f64"‚ãÑ"f64"‚ü©                      # fovY aspect nearPlane farPlane                  #
matrixOrtho                    ‚áê matrix    "MatrixOrtho"                    _R‚ü®"f64"‚ãÑ"f64"‚ãÑ"f64"‚ãÑ"f64"‚ãÑ"f64"‚ãÑ"f64"‚ü©          # left right bottom top nearPlane farPlane        #
matrixLookAt                   ‚áê matrix    "MatrixLookAt"                   _R‚ü®v3‚ãÑv3‚ãÑv3‚ü©                                     # eye target up                                   #
matrixToFloatV                 ‚áê float16   "MatrixToFloatV"                 _R‚ü®matrix‚ü©                                       # mat                                             #
quaternionAdd                  ‚áê quaternion"QuaternionAdd"                  _R‚ü®quaternion‚ãÑquaternion‚ü©                        # q1 q2                                           #
quaternionAddValue             ‚áê quaternion"QuaternionAddValue"             _R‚ü®quaternion‚ãÑf‚ü©                                 # q add                                           #
quaternionSubtract             ‚áê quaternion"QuaternionSubtract"             _R‚ü®quaternion‚ãÑquaternion‚ü©                        # q1 q2                                           #
quaternionSubtractValue        ‚áê quaternion"QuaternionSubtractValue"        _R‚ü®quaternion‚ãÑf‚ü©                                 # q sub                                           #
quaternionIdentity             ‚áê quaternion"QuaternionIdentity"             _R‚ü®‚ü©                                             #                                                 #
quaternionLength               ‚áê f         "QuaternionLength"               _R‚ü®quaternion‚ü©                                   # q                                               #
quaternionNormalize            ‚áê quaternion"QuaternionNormalize"            _R‚ü®quaternion‚ü©                                   # q                                               #
quaternionInvert               ‚áê quaternion"QuaternionInvert"               _R‚ü®quaternion‚ü©                                   # q                                               #
quaternionMultiply             ‚áê quaternion"QuaternionMultiply"             _R‚ü®quaternion‚ãÑquaternion‚ü©                        # q1 q2                                           #
quaternionScale                ‚áê quaternion"QuaternionScale"                _R‚ü®quaternion‚ãÑf‚ü©                                 # q mul                                           #
quaternionDivide               ‚áê quaternion"QuaternionDivide"               _R‚ü®quaternion‚ãÑquaternion‚ü©                        # q1 q2                                           #
quaternionLerp                 ‚áê quaternion"QuaternionLerp"                 _R‚ü®quaternion‚ãÑquaternion‚ãÑf‚ü©                      # q1 q2 amount                                    #
quaternionNlerp                ‚áê quaternion"QuaternionNlerp"                _R‚ü®quaternion‚ãÑquaternion‚ãÑf‚ü©                      # q1 q2 amount                                    #
quaternionSlerp                ‚áê quaternion"QuaternionSlerp"                _R‚ü®quaternion‚ãÑquaternion‚ãÑf‚ü©                      # q1 q2 amount                                    #
quaternionCubicHermiteSpline   ‚áê quaternion"QuaternionCubicHermiteSpline"   _R‚ü®quaternion‚ãÑquaternion‚ãÑquaternion‚ãÑquaternion‚ãÑf‚ü©# q1 outTangent1 q2 inTangent2 t                  #
quaternionFromVector3ToVector3 ‚áê quaternion"QuaternionFromVector3ToVector3" _R‚ü®v3‚ãÑv3‚ü©                                        # from to                                         #
quaternionFromMatrix           ‚áê quaternion"QuaternionFromMatrix"           _R‚ü®matrix‚ü©                                       # mat                                             #
quaternionToMatrix             ‚áê matrix    "QuaternionToMatrix"             _R‚ü®quaternion‚ü©                                   # q                                               #
quaternionFromAxisAngle        ‚áê quaternion"QuaternionFromAxisAngle"        _R‚ü®v3‚ãÑf‚ü©                                         # axis angle                                      #
quaternionToAxisAngle          ‚áê           "QuaternionToAxisAngle"          _R‚ü®quaternion‚ãÑ"*"‚àæv3‚ãÑ"*"‚àæf‚ü©                      # q outAxis outAngle                              #
quaternionToAxisAngleRef       ‚áê           "QuaternionToAxisAngle"          _R‚ü®quaternion‚ãÑ"&"‚àæv3‚ãÑ"&"‚àæf‚ü©                      # q outAxis outAngle                              #
quaternionFromEuler            ‚áê quaternion"QuaternionFromEuler"            _R‚ü®f‚ãÑf‚ãÑf‚ü©                                        # pitch yaw roll                                  #
quaternionToEuler              ‚áê v3        "QuaternionToEuler"              _R‚ü®quaternion‚ü©                                   # q                                               #
quaternionTransform            ‚áê quaternion"QuaternionTransform"            _R‚ü®quaternion‚ãÑmatrix‚ü©                            # q mat                                           #
quaternionEquals               ‚áê i         "QuaternionEquals"               _R‚ü®quaternion‚ãÑquaternion‚ü©                        # p q                                             #